#!/usr/bin/env python
#
# Copyright (C) 2008 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Signs all the APK files in a target-files zipfile, producing a new
target-files zip.

Usage:  sign_target_files_apks [flags] input_target_files output_target_files

  -e  (--extra_apks)  <name,name,...=key>
      Add extra APK name/key pairs as though they appeared in
      apkcerts.txt (so mappings specified by -k and -d are applied).
      Keys specified in -e override any value for that app contained
      in the apkcerts.txt file.  Option may be repeated to give
      multiple extra packages.

  -b  (--extra_sbsign)  <name,name,...=key>
      Add extra sbsign name/key pairs as though they appeared in
      sbsign_certs.txt (so mappings specified by -k and -d are applied).
      Keys specified in -b override any value for that binary contained
      in the sbsign_certs.txt file.  Option may be repeated to give
      multiple extra binaries.

  -r  (--extra_bin_cert_replace)  <name,name,...=old_cert:new_cert>
      Add extra name/bin_replace pairs as though they appeared in
      sbsign_certs.txt. Certs specified in -r override any value for
      that binary contained in the sbsign_certs.txt file.  Option may
      be repeated to give multiple extra binaries.

  -m  (--kmodule_key) <key>
      Re-sign all .ko files under /system/lib/modules inside the target
      files package with the provided key.

  -B  (--binary_bootimages) <name,name,...>
      Generate binary boot image which will end up in the generated
      target-files-package under BOOTABLE_IMAGES. For each specified name,
      It will look for the necessary files in an upper-case
      subdirectory <NAME> and produce BOOTABLE_IMAGES/<name>.img.

  -M  (--mkbootimg_args) <args>
      Override mkbootimg_args in META/misc_info.txt; only useful if
      -B is used. For secure boot scenarios this typically has key/signing
      tool information.

  -k  (--key_mapping)  <src_key=dest_key>
      Add a mapping from the key name as specified in apkcerts.txt (the
      src_key) to the real key you wish to sign the package with
      (dest_key).  Option may be repeated to give multiple key
      mappings.

  -d  (--default_key_mappings)  <dir>
      Set up the following key mappings:

        $devkey/devkey    ==>  $dir/releasekey
        $devkey/testkey   ==>  $dir/releasekey
        $devkey/media     ==>  $dir/media
        $devkey/shared    ==>  $dir/shared
        $devkey/platform  ==>  $dir/platform
        uefi_shim_key     ==>  $dir/uefi_shim_key
        uefi_bios_db_key  ==>  $dir/uefi_bios_db_key

      where $devkey is the directory part of the value of
      default_system_dev_certificate from the input target-files's
      META/misc_info.txt.  (Defaulting to "build/target/product/security"
      if the value is not present in misc_info.

      -d and -k options are added to the set of mappings in the order
      in which they appear on the command line.

  -o  (--replace_ota_keys)
      Replace the certificate (public key) used by OTA package
      verification with the one specified in the input target_files
      zip (in the META/otakeys.txt file).  Key remapping (-k and -d)
      is performed on this key.

  -t  (--tag_changes)  <+tag>,<-tag>,...
      Comma-separated list of changes to make to the set of tags (in
      the last component of the build fingerprint).  Prefix each with
      '+' or '-' to indicate whether that tag should be added or
      removed.  Changes are processed in the order they appear.
      Default value is "-test-keys,-dev-keys,+release-keys".

"""

import sys

if sys.hexversion < 0x02040000:
  print >> sys.stderr, "Python 2.4 or newer is required."
  sys.exit(1)

import cStringIO
import copy
import os
import re
import subprocess
import tempfile
import zipfile
import shutil

import common

OPTIONS = common.OPTIONS

OPTIONS.extra_apks = {}
OPTIONS.extra_sbsign = {}
OPTIONS.extra_bin_cert_replace = {}
OPTIONS.kmodule_key = None
OPTIONS.key_map = {}
OPTIONS.replace_ota_keys = False
OPTIONS.tag_changes = ("-test-keys", "-dev-keys", "+release-keys")
OPTIONS.mkbootimg_args = None

def GetApkCerts(tf_zip):
  certmap = common.ReadApkCerts(tf_zip)

  # apply the key remapping to the contents of the file
  for apk, cert in certmap.iteritems():
    certmap[apk] = OPTIONS.key_map.get(cert, cert)

  # apply all the -e options, overriding anything in the file
  for apk, cert in OPTIONS.extra_apks.iteritems():
    if not cert:
      cert = "PRESIGNED"
    certmap[apk] = OPTIONS.key_map.get(cert, cert)

  return certmap


def GetSbsignCerts(tf_zip):
  certmap = common.ReadSbsignCerts(tf_zip)

  # apply the key remapping to the contents of the file
  for binary, cert in certmap.iteritems():
    certmap[binary] = OPTIONS.key_map.get(cert, cert)

  # apply all the -b options, overriding anything in the file
  for binary, cert in OPTIONS.extra_sbsign.iteritems():
    if not cert:
      cert = "IGNORE"
    certmap[binary] = OPTIONS.key_map.get(cert, cert)

  return certmap


def GetBinaryReplaceCerts(tf_zip):
  replace_map = common.ReadBinaryReplaceCerts(tf_zip)

  discard = {}
  replace = {}

  for binary, dr in replace_map.iteritems():
    if ':' in dr:
      items = dr.split(':')
      discard[binary] = items[0]
      replace[binary] = items[1]
    else:
      raise ValueError("Error parsing for binary cert replacement: %s: %s" % (binary, dr))

  # apply the key remapping for certificate
  certmap = {}
  for binary, cert in replace.iteritems():
    certmap[binary] = OPTIONS.key_map.get(cert, cert)

  # key to discard is under DISCARD/ in zip
  discardmap = {}
  for binary, cert in discard.iteritems():
    discardmap[binary] = 'DISCARD/' + cert

  # apply all the -b options, overriding anything in the file
  for binary, cert in OPTIONS.extra_sbsign.iteritems():
    if not cert:
      cert = "IGNORE"
    certmap[binary] = OPTIONS.key_map.get(cert, cert)

  # apply all the -r options, overriding anything in the file
  for binary, cert in OPTIONS.extra_bin_cert_replace.iteritems():
    if not cert:
      cert = "IGNORE"
    discardmap[binary] = OPTIONS.key_map.get(cert, cert)

  mapping = {}
  for binary in replace_map:
    mapping[binary] = [discardmap[binary], certmap[binary]]

  return mapping


def CheckAllApksSigned(input_tf_zip, apk_key_map):
  """Check that all the APKs we want to sign have keys specified, and
  error out if they don't."""
  unknown_apks = []
  for info in input_tf_zip.infolist():
    if info.filename.endswith(".apk"):
      name = os.path.basename(info.filename)
      if name not in apk_key_map:
        unknown_apks.append(name)
  if unknown_apks:
    print "ERROR: no key specified for:\n\n ",
    print "\n  ".join(unknown_apks)
    print "\nUse '-e <apkname>=' to specify a key (which may be an"
    print "empty string to not sign this apk)."
    sys.exit(1)


def SignApk(data, keyname, pw):
  unsigned = tempfile.NamedTemporaryFile()
  unsigned.write(data)
  unsigned.flush()

  signed = tempfile.NamedTemporaryFile()

  common.SignFile(unsigned.name, signed.name, keyname, pw, align=4)

  data = signed.read()
  unsigned.close()
  signed.close()

  return data


def SbsignBinary(data, keyname, pw):
  unsigned = tempfile.NamedTemporaryFile()
  unsigned.write(data)
  unsigned.flush()

  signed = tempfile.NamedTemporaryFile()

  common.SbsignFile(unsigned.name, signed.name, keyname, pw)

  data = signed.read()
  unsigned.close()
  signed.close()

  return data


def SignKmodule(data, keyname, pw):
  unsigned = tempfile.NamedTemporaryFile()
  unsigned.write(data)
  unsigned.flush()

  signed = tempfile.NamedTemporaryFile()

  common.SignKmodule(unsigned.name, signed.name, keyname, pw)

  data = signed.read()
  unsigned.close()
  signed.close()

  return data


def BinaryCertReplace(data, cert_discard_data, cert_replace_prefix):
  old_cert_data = common.GetCertificateDER(cert_discard_data)

  # Replace data
  if old_cert_data in data:
    new_cert_data = common.GetCertificateDER(common.ReadCertificateFile(cert_replace_prefix))

    # cannot overwrite other data
    if (len(new_cert_data) > len(old_cert_data)):
      raise ValueError("length of new cert data is larger than the old cert")

    # need to make sure the replacement is of same size
    # or else the binary will be smaller!!
    while (len(new_cert_data) < len(old_cert_data)):
      new_cert_data = new_cert_data + b'\x00'

    output = data.replace(old_cert_data, new_cert_data)
  else:
    raise ValueError("Old cert not found in binary. Cannot replace.");

  return output


def BuildBootimages(built_bootimages, filename):
  if not built_bootimages:
    return

  tmpdir, output_zip = common.UnzipTemp(filename)
  misc_info = common.LoadInfoDict(output_zip)
  if OPTIONS.mkbootimg_args:
    misc_info["mkbootimg_args"] = OPTIONS.mkbootimg_args
  output_zip.close()

  images = {}
  for b in built_bootimages:
    dirname = b.upper()
    imgname = b.lower()
    images[imgname] = common.BuildBootableImage(
          os.path.join(tmpdir, dirname),
          os.path.join(tmpdir, "META/" + imgname + "_filesystem_config.txt"),
          misc_info)
  output_zip = zipfile.ZipFile(filename, "a")
  for name, data in images.iteritems():
    output_zip.writestr("BOOTABLE_IMAGES/" + name + ".img", data)
  output_zip.close()


def SignFiles(input_tf_zip, output_tf_zip, apk_key_map,
              sbsign_key_map, binary_cert_replace_map,
              kmodule_key, key_passwords):
  maxsize = max([len(os.path.basename(i.filename))
                 for i in input_tf_zip.infolist()
                 if i.filename.endswith('.apk')])

  # Find all discard file and copy them out
  discard_files = {};
  for info in input_tf_zip.infolist():
    if info.filename.startswith('DISCARD/') and \
         not info.filename.endswith('/'):
       discard_files[info.filename] = input_tf_zip.read(info.filename)
  for name in binary_cert_replace_map:
    cert = binary_cert_replace_map[name][0]
    if not cert.startswith('DISCARD/'):
      if os.path.isfile(cert + ".crt"):
        cert_fn = cert + ".crt"
      else:
        cert_fn = cert + ".x509.pem"

      print cert_fn
      f = open(cert_fn, "rb")
      discard_files[cert] = f.read()
      f.close()

  # Go through all the files and sign them
  for info in input_tf_zip.infolist():
    data = input_tf_zip.read(info.filename)
    out_info = copy.copy(info)
    if info.filename.endswith(".apk"):
      name = os.path.basename(info.filename)
      key = apk_key_map[name]
      if key not in common.SPECIAL_CERT_STRINGS:
        print "    signing: %-*s (%s)" % (maxsize, name, key)
        signed_data = SignApk(data, key, key_passwords[key])
        output_tf_zip.writestr(out_info, signed_data)
      else:
        # an APK we're not supposed to sign.
        print "NOT signing: %s" % (name,)
        output_tf_zip.writestr(out_info, data)
    elif kmodule_key and info.filename.endswith(".ko"):
      name = os.path.basename(info.filename)
      print "    signing: %-*s (%s)" % (maxsize, name, kmodule_key)
      signed_data = SignKmodule(data, kmodule_key, key_passwords[kmodule_key])
      output_tf_zip.writestr(out_info, signed_data)
    elif info.filename in ("SYSTEM/build.prop",
                           "RECOVERY/RAMDISK/default.prop"):
      print "rewriting %s:" % (info.filename,)
      new_data = RewriteProps(data)
      output_tf_zip.writestr(out_info, new_data)
    else:
      # need to check if we need to replace cert embedded in file
      # and/or if the binary needs to be re-signed using sbsign
      name = os.path.basename(info.filename)
      cert_replaced = False

      if name in binary_cert_replace_map or name in sbsign_key_map:

        # need to replace cert in binary
        # and have to do this before re-signing
        if name in binary_cert_replace_map:
          cert = binary_cert_replace_map[name][1];
          discard = binary_cert_replace_map[name][0];
          print "   certchg:  %-*s (%s -> %s)" % (maxsize, name, discard, cert)
          replaced_data = BinaryCertReplace(data, discard_files[discard], cert)
          cert_replaced = True

        # need to re-sign the binary
        if name in sbsign_key_map:
          key = sbsign_key_map[name]
          print "    sbsign:  %-*s (%s)" % (maxsize, name, key)
          if cert_replaced:
            tosign_data = replaced_data
          else:
            tosign_data = data

          signed_data = SbsignBinary(tosign_data, key, key_passwords[key])
          output_tf_zip.writestr(out_info, signed_data)

      else:
        # a non-APK file; copy it verbatim
        # if they are not under DISCARD/
        if not info.filename.startswith('DISCARD/'):
          output_tf_zip.writestr(out_info, data)


def EditTags(tags):
  """Given a string containing comma-separated tags, apply the edits
  specified in OPTIONS.tag_changes and return the updated string."""
  tags = set(tags.split(","))
  for ch in OPTIONS.tag_changes:
    if ch[0] == "-":
      tags.discard(ch[1:])
    elif ch[0] == "+":
      tags.add(ch[1:])
  return ",".join(sorted(tags))


def RewriteProps(data):
  output = []
  for line in data.split("\n"):
    line = line.strip()
    original_line = line
    if line and line[0] != '#':
      key, value = line.split("=", 1)
      if key == "ro.build.fingerprint":
        pieces = value.split("/")
        pieces[-1] = EditTags(pieces[-1])
        value = "/".join(pieces)
      elif key == "ro.build.description":
        pieces = value.split(" ")
        assert len(pieces) == 5
        pieces[-1] = EditTags(pieces[-1])
        value = " ".join(pieces)
      elif key == "ro.build.tags":
        value = EditTags(value)
      line = key + "=" + value
    if line != original_line:
      print "  replace: ", original_line
      print "     with: ", line
    output.append(line)
  return "\n".join(output) + "\n"


def ReplaceOtaKeys(input_tf_zip, output_tf_zip, misc_info):
  try:
    keylist = input_tf_zip.read("META/otakeys.txt").split()
  except KeyError:
    raise ExternalError("can't read META/otakeys.txt from input")

  extra_recovery_keys = misc_info.get("extra_recovery_keys", None)
  if extra_recovery_keys:
    extra_recovery_keys = [OPTIONS.key_map.get(k, k) + ".x509.pem"
                           for k in extra_recovery_keys.split()]
    if extra_recovery_keys:
      print "extra recovery-only key(s): " + ", ".join(extra_recovery_keys)
  else:
    extra_recovery_keys = []

  mapped_keys = []
  for k in keylist:
    m = re.match(r"^(.*)\.x509\.pem$", k)
    if not m:
      raise ExternalError("can't parse \"%s\" from META/otakeys.txt" % (k,))
    k = m.group(1)
    mapped_keys.append(OPTIONS.key_map.get(k, k) + ".x509.pem")

  if mapped_keys:
    print "using:\n   ", "\n   ".join(mapped_keys)
    print "for OTA package verification"
  else:
    devkey = misc_info.get("default_system_dev_certificate",
                           "build/target/product/security/testkey")
    mapped_keys.append(
        OPTIONS.key_map.get(devkey, devkey) + ".x509.pem")
    print "META/otakeys.txt has no keys; using", mapped_keys[0]

  # recovery uses a version of the key that has been slightly
  # predigested (by DumpPublicKey.java) and put in res/keys.
  # extra_recovery_keys are used only in recovery.

  p = common.Run(["java", "-jar",
                  os.path.join(OPTIONS.search_path, "framework", "dumpkey.jar")]
                 + mapped_keys + extra_recovery_keys,
                 stdout=subprocess.PIPE)
  data, _ = p.communicate()
  if p.returncode != 0:
    raise ExternalError("failed to run dumpkeys")
  common.ZipWriteStr(output_tf_zip, "RECOVERY/RAMDISK/res/keys", data)

  # SystemUpdateActivity uses the x509.pem version of the keys, but
  # put into a zipfile system/etc/security/otacerts.zip.
  # We DO NOT include the extra_recovery_keys (if any) here.

  tempfile = cStringIO.StringIO()
  certs_zip = zipfile.ZipFile(tempfile, "w")
  for k in mapped_keys:
    certs_zip.write(k)
  certs_zip.close()
  common.ZipWriteStr(output_tf_zip, "SYSTEM/etc/security/otacerts.zip",
                     tempfile.getvalue())


def BuildKeyMap(misc_info, key_mapping_options):
  for s, d in key_mapping_options:
    if s is None:   # -d option
      devkey = misc_info.get("default_system_dev_certificate",
                             "build/target/product/security/testkey")
      devkeydir = os.path.dirname(devkey)

      OPTIONS.key_map.update({
          devkeydir + "/testkey":  d + "/releasekey",
          devkeydir + "/devkey":   d + "/releasekey",
          devkeydir + "/media":    d + "/media",
          devkeydir + "/shared":   d + "/shared",
          devkeydir + "/platform": d + "/platform",
          "uefi_shim_key":         d + "/uefi_shim_key",
          "uefi_bios_db_key":      d + "/uefi_bios_db_key",
          "kmodule_key":           d + "/kmodule_key",
          })
    else:
      OPTIONS.key_map[s] = d


def main(argv):

  key_mapping_options = []
  built_bootimages = []

  def option_handler(o, a):
    if o in ("-e", "--extra_apks"):
      names, key = a.split("=")
      names = names.split(",")
      for n in names:
        OPTIONS.extra_apks[n] = key
    elif o in ("-b", "--extra_sbsign"):
      names, key = a.split("=")
      names = names.split(",")
      for n in names:
        OPTIONS.extra_sbsign[n] = key
    elif o in ("-r", "--extra_bin_cert_replace"):
      names, key = a.split("=")
      names = names.split(",")
      for n in names:
        OPTIONS.extra_bin_cert_replace[n] = key
    elif o in ("-m", "--kmodule_key"):
      OPTIONS.kmodule_key = a
    elif o in ("-d", "--default_key_mappings"):
      key_mapping_options.append((None, a))
    elif o in ("-k", "--key_mapping"):
      key_mapping_options.append(a.split("=", 1))
    elif o in ("-o", "--replace_ota_keys"):
      OPTIONS.replace_ota_keys = True
    elif o in ("-M", "--mkbootimg_args"):
      OPTIONS.mkbootimg_args = a
    elif o in ("-B", "--binary_bootimages"):
      built_bootimages.extend(a.split(","))
    elif o in ("-t", "--tag_changes"):
      new = []
      for i in a.split(","):
        i = i.strip()
        if not i or i[0] not in "-+":
          raise ValueError("Bad tag change '%s'" % (i,))
        new.append(i[0] + i[1:].strip())
      OPTIONS.tag_changes = tuple(new)
    else:
      return False
    return True

  args = common.ParseOptions(argv, __doc__,
                             extra_opts="e:b:r:d:k:m:ot:B:M:",
                             extra_long_opts=["extra_apks=",
                                              "extra_sbsign=",
                                              "extra_bin_cert_replace=",
                                              "default_key_mappings=",
                                              "kmodule_key=",
                                              "key_mapping=",
                                              "replace_ota_keys",
                                              "tag_changes=",
                                              "binary_bootimages=",
                                              "mkbootimg_args="],
                             extra_option_handler=option_handler)

  if len(args) != 2:
    common.Usage(__doc__)
    sys.exit(1)

  input_zip = zipfile.ZipFile(args[0], "r")
  output_zip = zipfile.ZipFile(args[1], "w")

  misc_info = common.LoadInfoDict(input_zip)

  BuildKeyMap(misc_info, key_mapping_options)

  apk_key_map = GetApkCerts(input_zip)
  CheckAllApksSigned(input_zip, apk_key_map)

  binary_cert_replace_map = GetBinaryReplaceCerts(input_zip)
  sbsign_key_map = GetSbsignCerts(input_zip)

  key_passwords = common.GetKeyPasswords(set(apk_key_map.values()))
  key_passwords.update(common.GetKeyPasswords(set(sbsign_key_map.values())))
  if OPTIONS.kmodule_key:
      key_passwords.update(common.GetKeyPasswords(set([OPTIONS.kmodule_key])))

  SignFiles(input_zip, output_zip, apk_key_map, sbsign_key_map,
            binary_cert_replace_map, OPTIONS.kmodule_key, key_passwords)

  if OPTIONS.replace_ota_keys:
    ReplaceOtaKeys(input_zip, output_zip, misc_info)

  input_zip.close()
  output_zip.close()
  BuildBootimages(built_bootimages, args[1])

  print "done."


if __name__ == '__main__':
  try:
    main(sys.argv[1:])
  except common.ExternalError, e:
    print
    print "   ERROR: %s" % (e,)
    print
    sys.exit(1)
  finally:
    common.Cleanup()
